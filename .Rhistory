dat2 <- data.frame(dat, subject = subject)
nf <- ncol(dat) - 1
nadat <- names(dat)
nadat2 <- nadat[-1]
fl <- NA
for (aa in 1:nf) {
fl[aa] <- nlevels(as.factor(dat[ ,aa + 1]))
}
levels <- list()
for (jj in 1:nf) {
levels[[jj]] <- levels(as.factor(dat[ ,jj + 1]))
}
lev_names <- expand.grid(levels)
nf
fl
lev_names
lev_names <- lev_names[do.call(order, lev_names[, 1:nf]), ]
dat2 <- dat2[do.call(order, dat2[, 2:(nf + 1)]), ]
response <- dat2[, 1]
nr_hypo <- attr(terms(formula), "factors")
fac_names <- colnames(nr_hypo)
fac_names_original <- fac_names
perm_names <- t(attr(terms(formula), "factors")[-1, ])
n <- plyr::ddply(dat2, nadat2, plyr::summarise, Measure = length(subject),
.drop = F)$Measure
n
TYPE <- "nested"
nf
P(fl[1]) %x% One(fl[2])
fl[1]
fl[2]
formula
lev_names
levels(dogs$dog)
levels
fac_names
fac_names_original
formula <- abund ~ transect + transect:height
data <- SMabund
dat <- model.frame(formula, data)
subject <- 1:nrow(dat)
dat2 <- data.frame(dat, subject = subject)
nf <- ncol(dat) - 1
nadat <- names(dat)
nadat2 <- nadat[-1]
fl <- NA
for (aa in 1:nf) {
fl[aa] <- nlevels(as.factor(dat[ ,aa + 1]))
}
levels <- list()
for (jj in 1:nf) {
levels[[jj]] <- levels(as.factor(dat[ ,jj + 1]))
}
lev_names <- expand.grid(levels)
levels
lev_names
is.unique(lev_names$Var2)
unique(lev_names$Var2)
duplicated(lev_names$Var2)
duplicated(lev_names$Var2)==FALSE
?all
all(duplicated(lev_names$Var2))
devtools::load_all("~/Documents/Studium/02 Uni Ulm/02 Promotion/R-package/GFD")
test <- GFD(abund ~ transect + transect:height, data = SMabund)
summary(test)
dogs <- read.table("/home/sarah/Documents/Studium/02 Uni Ulm/02 Promotion/R-package/Beispieldaten/Dogs.csv", header=TRUE, sep = ",")
ccc <- GFD(SVR ~ group + group:dog, data = dogs, nperm = 10000, alpha = 0.05)
devtools::load_all("~/Documents/Studium/02 Uni Ulm/02 Promotion/R-package/GFD")
ccc <- GFD(SVR ~ group + group:dog, data = dogs, nperm = 10000, alpha = 0.05)
dogs <- read.table("/home/sarah/Documents/Studium/02 Uni Ulm/02 Promotion/R-package/Beispieldaten/Dogs.csv", header=TRUE, sep = ",")
devtools::load_all("~/Documents/Studium/02 Uni Ulm/02 Promotion/R-package/GFD")
ccc <- GFD(SVR ~ group + group:dog, data = dogs, nperm = 10000, alpha = 0.05)
formula <- SVR ~ group + group:dog
data = dogs
head(dogs)
dogs
dat <- model.frame(formula, data)
subject <- 1:nrow(dat)
dat2 <- data.frame(dat, subject = subject)
nf <- ncol(dat) - 1
nadat <- names(dat)
nadat2 <- nadat[-1]
fl <- NA
for (aa in 1:nf) {
fl[aa] <- nlevels(as.factor(dat[ ,aa + 1]))
}
levels <- list()
for (jj in 1:nf) {
levels[[jj]] <- levels(as.factor(dat[ ,jj + 1]))
}
lev_names <- expand.grid(levels)
lev_names
lev_names <- lev_names[do.call(order, lev_names[, 1:nf]), ]
# sorting data according to factors
dat2 <- dat2[do.call(order, dat2[, 2:(nf + 1)]), ]
response <- dat2[, 1]
nr_hypo <- attr(terms(formula), "factors")
fac_names <- colnames(nr_hypo)
fac_names_original <- fac_names
perm_names <- t(attr(terms(formula), "factors")[-1, ])
n <- plyr::ddply(dat2, nadat2, plyr::summarise, Measure = length(subject),
.drop = F)$Measure
lev_names
n
fac_names
nf
hypo_matrices <- HN(fl)
all(duplicated(lev_names$Var2))
lev_names <- as.factor(unlist(lev_names))
blev <- as.factor(unlist(blev))
lev_names <- cbind.data.frame(lev_names, blev)
blev <- list()
lev_names <- as.factor(unlist(lev_names))
blev <- as.factor(unlist(blev))
lev_names <- cbind.data.frame(lev_names, blev)
blev
as.factor(unlist(lev_names))
for (ii in 1:length(levels[[1]])) {
blev[[ii]] <- levels(as.factor(dat[, 3][dat[, 2] == levels[[1]][ii]]))
lev_names[[ii]] <- rep(levels[[1]][ii], length(blev[[ii]]))
}
levels[[1]]
levels
n <- n[n != 0]
n
blev <- list()
lev_names <- list()
for (ii in 1:length(levels[[1]])) {
blev[[ii]] <- levels(as.factor(dat[, 3][dat[, 2] == levels[[1]][ii]]))
lev_names[[ii]] <- rep(levels[[1]][ii], length(blev[[ii]]))
}
if (nf == 2) {
lev_names <- as.factor(unlist(lev_names))
blev <- as.factor(unlist(blev))
lev_names <- cbind.data.frame(lev_names, blev)
} else {
}
lev_names
scores <- c(25, 29, 14, 11, 11, 6, 22, 18, 17, 20, 5, 2)
school <- factor(c("A", "A", "A", "A", "B", "B", "B", "B", "C", "C", "C", "C"))
teacher <- factor(c(1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6))
teacher2 <- factor(c(1, 1, 2, 2, 1, 1, 2, 2, 1, 1, 2, 2))  # This is the way the data is coded for problems in the book
res1 <- lm(scores ~ school + school/teacher)
anova(res1)
res1 <- lm(scores ~ school + school:teacher)
anova(res1)
res2 <- lm(scores ~ school + school/teacher2)
anova(res2)
GFD(scores ~ school + school:teacher)
school
teacher
devtools::load_all("~/Documents/Studium/02 Uni Ulm/02 Promotion/R-package/GFD")
test <- GFD(abund ~ transect + transect:height, data = SMabund)
summary(test)
ccc <- GFD(SVR ~ group + group:dog, data = dogs, nperm = 10000, alpha = 0.05)
ccc <- GFD(SVR ~ group + group:dog, data = dogs, nperm = 10000, alpha = 0.05, nested.levels = TRUE)
summary(ccc)
summary(MANOVA(SVR ~ group + group:dog, data = dogs, nperm = 10000, alpha = 0.05, nested.levels = TRUE))
head(dogs)
summary(MANOVA(SVR ~ group + group:dog, data = dogs, subject ="dog"))
set.seed(987)
nested <- GFD(dugesia ~ season + season:site, data = curdies)
nested <- GFD(dugesia ~ season + season:site, data = curdies, nested.levels = TRUE)
summary(nested)
devtools::load_all("~/Documents/Studium/02 Uni Ulm/02 Promotion/R-package/GFD")
devtools::load_all("~/Documents/Studium/02 Uni Ulm/02 Promotion/R-package/GFD")
ccc <- GFD(SVR ~ group + group:dog, data = dogs, nperm = 10000, alpha = 0.05)
ccc <- GFD(SVR ~ group + group:dog, data = dogs, nperm = 10000, alpha = 0.05, nested.levels.unique = TRUE)
devtools::document()
devtools::document()
library(root)
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
library(GFD)
data("curdies")
set.seed(987)
nested <- GFD(dugesia ~ season + season:site, data = curdies, nested.levels.unique = TRUE)
devtools::load_all(".")
devtools::load_all(".")
library(GFD)
swissDros <-read.csv2("SD8sub2.csv",sep=";")
transect=swissDros[,1]
height=as.factor(swissDros[,3])
setwd("/home/sarah/Documents/Studium/02 Uni Ulm/02 Promotion/Anwendungen/Andrew/")
swissDros <-read.csv2("SD8sub2.csv",sep=";")
transect=swissDros[,1]
height=as.factor(swissDros[,3])
subject=swissDros[,2]
abund=as.numeric(swissDros[,6])
SMabund <- data.frame(abund, transect, height, subject)
test <- GFD(abund ~ transect + transect:height, data = SMabund)
summary(test)
head(swissDros)
height2=as.factor(swissDros[,3])
swissDros2 <-read.csv2("SD8sub2_2.csv",sep=",")
height2=swissDros2[,3]
SMabund2 <- data.frame(abund, transect, height2, subject)
test <- GFD(abund ~ transect + transect:height2, data = SMabund2)
test <- GFD(abund ~ transect + transect:height2, data = SMabund2, nested.levels.unique = TRUE)
summary(test)
SMabund2 <- data.frame(abund, transect, as.factor(height2), subject)
test <- GFD(abund ~ transect + transect:height2, data = SMabund2, nested.levels.unique = TRUE)
summary(test)
height2=as.factor(swissDros2[,3])
SMabund2 <- data.frame(abund, transect, height2, subject)
test <- GFD(abund ~ transect + transect:height2, data = SMabund2, nested.levels.unique = TRUE)
library(GFD)
devtools::load_all("~/Documents/Studium/02 Uni Ulm/02 Promotion/R-package/GFD")
library(GFD)
devtools::load_all(".")
library(GFD)
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::build_win()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
GFD(weightgain ~ source * type, data = HSAUR::weightgain)
data(startup)
model <- GFD(Costs ~ company, data = startup)
summary(model)
GFD(weightgain ~ source * type, data = HSAUR::weightgain, iter = 1000)
GFD(weightgain ~ source * type, data = HSAUR::weightgain, nperm = 1000)
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::build_win()
devtools::load_all(".")
devtools::document()
library(GFD)
nparcomp
data = HSAUR::weightgain
data = startup
devtools::load_all(".")
devtools::load_all(".")
data(startup)
model <- GFD(Costs ~ company, data = startup)
summary(model)
devtools::load_all(".")
model <- GFD(Costs ~ company, data = startup)
summary(model)
ba <- startup[startup$company == "baker", ]
ba
mean(ba$Costs)
var(ba$Costs)
formula <- Costs ~ company
data <- startup
dat <- model.frame(formula, data)
subject <- 1:nrow(dat)
dat2 <- data.frame(dat, subject = subject)
nf <- ncol(dat) - 1
nadat <- names(dat)
nadat2 <- nadat[-1]
fl <- NA
for (aa in 1:nf) {
fl[aa] <- nlevels(as.factor(dat[ ,aa + 1]))
}
levels <- list()
for (jj in 1:nf) {
levels[[jj]] <- levels(as.factor(dat[ ,jj + 1]))
}
lev_names <- expand.grid(levels)
nf
dat2 <- dat2[order(dat2[, 2]), ]
response <- dat2[, 1]
nr_hypo <- attr(terms(formula), "factors")
fac_names <- colnames(nr_hypo)
n <- plyr::ddply(dat2, nadat2, plyr::summarise, Measure = length(subject),
.drop = F)$Measure
# contrast matrix
hypo <- diag(fl) - matrix(1 / fl, ncol = fl, nrow = fl)
WTS_out <- matrix(NA, ncol = 3, nrow = 1)
ATS_out <- matrix(NA, ncol = 4, nrow = 1)
WTPS_out <- rep(NA, 1)
rownames(WTS_out) <- fac_names
rownames(ATS_out) <- fac_names
names(WTPS_out) <- fac_names
H <- hypo_matrix
H <- hypo
x <- response
N <- sum(n)
N
n
A <- t(rep(1 / n[1], n[1]))
A1 <- t(rep(1, n[1]))
for (ii in 2:length(n)) {
A <- magic::adiag(A, t(rep(1 / n[ii], n[ii])))
A1 <- magic::adiag(A1, t(rep(1, n[ii])))
}
# -----------------------------------------------------#
means <- A %*% x
means
x2 <- x ^ 2
vars <- (A1 %*% x2 - n * means ^ 2) / (n * (n - 1))
vars
var(ba$Costs)/n[1]
CI_lower <- means - sqrt(vars) * qt(1 - alpha / 2, df = n-1)
alpha <- 0.05
CI_lower <- means - sqrt(vars) * qt(1 - alpha / 2, df = n-1)
CI_lower
m <- mean(ba$Costs)
v <- var(ba$Costs)
m-sqrt(v/n[1])*qt(0.975, df = n[1]-1)
model <- GFD(Costs ~ company, data = startup)
model <- GFD(Costs ~ company, data = startup, CI.method = "perm")
summary(model)
devtools::load_all(".")
devtools::check()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
model <- GFD(Costs ~ company, data = startup, CI.method = "perm")
summary(model)
devtools::document()
devtools::build_win()
search()
requireNamespace("RGtk2", quietly = TRUE)
requireNamespace("RGtk2")
remove.packages("RGtk2", lib="~/usr/lib64/R/library")
devtools::load_all(".")
calculateGUI()
requireNamespace("RGtk2")
devtools::load_all(".")
calculateGUI()
install.packages("RGtk2")
devtools::load_all(".")
calculateGUI()
devtools::build_win()
if(requireNamespace("RGtk2", quietly = TRUE)){
print("ok")}
("package:RGtk2" %in% search())
?RGtk2
devtools::build_win()
devtools::load_all(".")
remove.packages("RGtk2", lib="~/usr/lib64/R/library")
calculateGUI()
devtools::load_all(".")
calculateGUI()
install.packages("RGtk2")
devtools::load_all(".")
calculateGUI()
devtools::build_win()
devtools::load_all(".")
calculateGUI()
devtools::build_win()
280+360+370+340+340+390+60
2140/7
420+500+170+130+360+250+350+400+350
2930/9
0.2*4116
1/6
6.8/1.2
5.3/1.2
1.9/3
4*1.8
devtools::load_all(".")
data(startup)
model <- GFD(Costs ~ company, data = startup, CI.method = "perm")
2 > c(1, 3, 5)
2 > c(1, 3, 5)mean())
mean(2 > c(1, 3, 5))
formula <- Costs ~ company
data = startup
dat <- model.frame(formula, data)
subject <- 1:nrow(dat)
dat2 <- data.frame(dat, subject = subject)
nf <- ncol(dat) - 1
nadat <- names(dat)
nadat2 <- nadat[-1]
fl <- NA
for (aa in 1:nf) {
fl[aa] <- nlevels(as.factor(dat[ ,aa + 1]))
}
levels <- list()
for (jj in 1:nf) {
levels[[jj]] <- levels(as.factor(dat[ ,jj + 1]))
}
lev_names <- expand.grid(levels)
nf == 1)
nf == 1
# one-way layout
dat2 <- dat2[order(dat2[, 2]), ]
response <- dat2[, 1]
nr_hypo <- attr(terms(formula), "factors")
fac_names <- colnames(nr_hypo)
n <- plyr::ddply(dat2, nadat2, plyr::summarise, Measure = length(subject),
.drop = F)$Measure
# contrast matrix
hypo <- diag(fl) - matrix(1 / fl, ncol = fl, nrow = fl)
WTS_out <- matrix(NA, ncol = 3, nrow = 1)
ATS_out <- matrix(NA, ncol = 4, nrow = 1)
WTPS_out <- rep(NA, 1)
rownames(WTS_out) <- fac_names
rownames(ATS_out) <- fac_names
names(WTPS_out) <- fac_names
results <- Stat(data = response, n = n, hypo, nperm = nperm, alpha, CI.method)
nperm <- 10
alpha <- 0.05
CI.method <- "perm"
results <- Stat(data = response, n = n, hypo, nperm = nperm, alpha, CI.method)
H <- hypo_matrix
H <- hypo
x <- data
N <- sum(n)
#---------------- useful matrices ---------------------#
A <- t(rep(1 / n[1], n[1]))
A1 <- t(rep(1, n[1]))
for (ii in 2:length(n)) {
A <- magic::adiag(A, t(rep(1 / n[ii], n[ii])))
A1 <- magic::adiag(A1, t(rep(1, n[ii])))
}
# -----------------------------------------------------#
means <- A %*% x
x2 <- x ^ 2
vars <- (A1 %*% x2 - n * means ^ 2) / (n * (n - 1)) # = var(x)/n
x
x <- response
#---------------- useful matrices ---------------------#
A <- t(rep(1 / n[1], n[1]))
A1 <- t(rep(1, n[1]))
for (ii in 2:length(n)) {
A <- magic::adiag(A, t(rep(1 / n[ii], n[ii])))
A1 <- magic::adiag(A1, t(rep(1, n[ii])))
}
# -----------------------------------------------------#
means <- A %*% x
x2 <- x ^ 2
vars <- (A1 %*% x2 - n * means ^ 2) / (n * (n - 1)) # = var(x)/n
if (0 %in% vars) {
stop("The variance in some group equals 0!")
}
Sn <- N * diag(c(vars))
# WTS
T <- t(H) %*% MASS::ginv(H %*% Sn %*% t(H)) %*% H
WTS <- N * t(means) %*% T %*% means
df_WTS <- Matrix::rankMatrix(H)[[1]]
# ATS
C <- t(H) %*% MASS::ginv(H %*% t(H)) %*% H
D <- diag(C) * diag(ncol(C))
spur <- sum(diag(D %*% Sn))
Lambda <- diag(1 / (n - 1))
ATS <- N / spur * t(means) %*% C %*% means
df_ATS1 <- spur ^ 2 / sum(diag(C %*% Sn %*% C %*% Sn))
df_ATS2 <- spur ^ 2 / sum(diag(D %*% D %*% Sn %*% Sn %*% Lambda))
#----------------------------Permutation matrix--------------------#
Perm <- matrix(0, nrow = N, ncol = nperm)
for (pp in 1:nperm) {
Perm[, pp] <- sample(1:N)
}
xperm <- matrix(x[Perm], ncol = nperm)
xperm2 <- xperm ^ 2
meansP <- A %*% xperm
varsP <- (A1 %*% xperm2 - n * meansP ^ 2) / (n * (n - 1))
#---------------------Wald-Type for permuted data ----------------#
WTPS <- sapply(1:nperm, function(arg) {
TP <- t(H) %*% MASS::ginv(H %*% (N * diag(varsP[,arg])) %*% t(H)) %*% H
WTPS <- diag(N * t(meansP[, arg]) %*% TP %*% meansP[, arg])
})
WTPS
WTS
#------------------------ p-values -------------------------------#
p_valueWTS <- 1 - pchisq(abs(WTS), df = df_WTS)
p_valueATS <- 1 - pf(abs(ATS), df1 = df_ATS1, df2 = df_ATS2)
ecdf_WTPS <- ecdf(WTPS)
p_valueWTPS <- 1 - ecdf_WTPS(WTS)
quant_WTPS <- quantile(ecdf_WTPS, alpha)
p_valueWTPS2 <- mean(WTS > WTPS)
WTS > WTPS
WTPS
WTS
as.numeric(WTS)
p_valueWTPS2 <- mean(as.numeric(WTS) > WTPS)
devtools::load_all(".")
model <- GFD(Costs ~ company, data = startup, CI.method = "perm")
summary(model)
model$wtps2
devtools::load_all(".")
model <- GFD(Costs ~ company, data = startup, CI.method = "perm")
model$wtps2
qchisq(0.95, df = 4)
devtools::load_all(".")
model <- GFD(Costs ~ company, data = startup, CI.method = "perm")
model$wtps2
devtools::load_all(".")
model <- GFD(Costs ~ company, data = startup, CI.method = "perm")
model$wtps2
summary(model)
GFD(weightgain ~ source * type, data = HSAUR::weightgain, nperm = 1000)
devtools::load_all(".")
GFD(weightgain ~ source * type, data = HSAUR::weightgain, nperm = 1000)
qchisq(0.95, df = 1)
install.packages("HSAUR3")
devtools::load_all(".")
devtools::load_all(".")
library(GFD)
devtools::document()
devtools::document()
library(GFD)
devtools::document()
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
devtools::check(force_suggests = TRUE)
devtools::load_all(".")
devtools::check(force_suggests = TRUE)
devtools::document()
